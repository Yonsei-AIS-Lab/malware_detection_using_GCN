import numpy as np
import pandas as pd
import torch
from torch_geometric.data import Data

def get_data_info(data):
    """
    0: Normal
    1: Extortion Virus
    2: Mining Program
    3: DDoS Trojan Horse
    4: Worm Virus
    5: Infectious Virus
    6: Backdoor Program
    7: Trojan horse Program
    """
    label = data.groupby(['file_id', 'label'])['label'].unique()
    counts = label.value_counts()
    apis = data['api'].unique()
    files = data['file_id'].unique()
    
    nb_files = len(files)
    nb_data = len(data)
    nb_labels = len(counts)
    nb_apis = len(apis)+1

    print('-----| Get Data Information |-----')
    print(f"- Files    : {nb_files:<6}\n"
          f"- Data     : {nb_data:<6}\n"
          f"- Labels   : {nb_labels:<6}\n"
          f"- APIs     : {nb_apis:<6}\n"
          )
    
    #print(counts)

    return nb_files, nb_data, nb_labels, nb_apis

def print_progress(cur, total):
    print(f"## Progress: {cur+1}/{total} ##", end='\r')

def split_per_id(data, nb_files):
    split_per_flie_id = []
    print('-----| Split Per File ID |-----')
    for i in range(nb_files):
        split_per_flie_id.append(data[data['file_id']==i+1])
        print_progress(i, nb_files)
    print('\n')

    return split_per_flie_id

def creat_api2idx(data):
    api_names = data['api'].unique()

    api2idx = {}
    api2idx['[UNK]'] = 0
    for i, api_name in enumerate(api_names):
        api2idx[api_name] = i+1

    return api2idx

def encode_api_name(data_split_per_id, api2idx):
    file_len = len(data_split_per_id)
    files = []
    labels = []
    print('-----| Encode API Name |-----')

    for i, datas in enumerate(data_split_per_id):
        encoded_data = datas.copy()
        encoded_apis = (encoded_data['api'].map(api2idx)).fillna(0).astype(int).to_list()
        label = encoded_data['label'].to_list()[0]

        files.append(encoded_apis)
        labels.append(label)

        """
        if len(encoded_apis) != len(label):
            print("[!!!ERORR!!!] nb_Data != nb_Label")
            print(f'{len(datas)}, {len(label)}')
        """

        print_progress(i, file_len)
    print('\n')
    
    return files, labels

def create_feature_matrix(edge_idx, labels, api2idx):
    file_len = len(edge_idx)
    
    nb_apis = len(api2idx)
    print('-----| Create Feature Matrix |-----')

    results_features = []
    results_labels = []

    for i, edge in enumerate(edge_idx):
        srcs = edge[0]
        dsts = edge[1]

        # degree
        degrees = np.zeros((nb_apis))
        for dst in dsts:
            degrees[dst] += 1
        degrees = degrees.reshape(-1, 1).tolist()

        # neighboring nodes
        features = []
        for api_number in range(len(degrees)):
            feature = []

            indices = np.where(dsts == api_number)
            neighboring = np.unique(srcs[indices])

            # local degree proflie, LDP
            if len(neighboring) == 0:
                min_degree = 0
                max_degree = 0
                avg_degree = 0
                std_degree = 0
            else:
                targets = np.array(degrees)[neighboring]
                min_degree = np.min(targets)
                max_degree = np.max(targets)
                avg_degree = np.mean(targets)
                std_degree = np.std(targets)

            feature.append(degrees[api_number][0])
            feature.append(min_degree)
            feature.append(max_degree)
            feature.append(avg_degree)
            feature.append(std_degree)

            features.append(feature)

        results_features.append(features)
        results_labels.append(np.full((nb_apis), labels[i]))
    
        print_progress(i, file_len)
    
    print('\n')

    return np.array(results_features), results_labels

def create_edge_index(files):
    print('-----| Create Adjacency Matrix |-----')
    file_len = len(files)

    results = []
    for i, nodes in enumerate(files):
        nb_edge = len(nodes)-1
        src, dst = nodes[:-1], nodes[1:]

        edge_idx = np.array([src, dst])

        results.append(edge_idx)
        print_progress(i, file_len)
    print('\n')

    return results

def create_geometric(feature_mat, edge_idx, labels):
    print('-----| Create Geometric Data |-----')

    nb_data = len(labels)

    results = []
    for i in range(nb_data):
        x = torch.tensor(feature_mat[i], dtype=torch.float)
        edge_index = torch.tensor(edge_idx[i], dtype=torch.int)
        y = torch.tensor(labels[i], dtype=torch.long)

        results.append(Data(x=x, edge_index=edge_index, y=y))
        print_progress(i, nb_data)
    print('\n')

    return results

def preprocessing_graph_data(data, nb_files):
    data_split_per_id = split_per_id(data, nb_files)

    api2idx = creat_api2idx(data)

    files, labels = encode_api_name(data_split_per_id, api2idx)

    edge_idx = create_edge_index(files)
    feature_mat, labels = create_feature_matrix(edge_idx, labels, api2idx)

    processed = create_geometric(feature_mat, edge_idx, labels)

    return processed