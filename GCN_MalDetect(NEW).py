from utils import *

import torch
from torch_geometric.data import Data

def create_edge_index(files):
    print('-----| Create Adjacency Matrix |-----')

    results = []
    for i, nodes in enumerate(files):
        nb_edge = len(nodes)-1
        src, dst = nodes[:nb_edge], nodes[1:]

        edge_idx = np.array([src, dst])

        results.append(edge_idx)
        print_progress(i, nb_files)
    print('\n')

    return results

def create_geometric(feature_mat, edge_idx, labels):
    print('-----| Create Geometric Data |-----')

    nb_data = len(labels)

    results = []
    for i in range(nb_data):
        x = torch.tensor(feature_mat[i].reshape(-1, 1))
        edge_index = torch.tensor(edge_idx[i])
        y = torch.tensor(labels[i])

        results.append(Data(x=x, edge_index=edge_index, y=y))
        print_progress(i, nb_files)
    print('\n')

    return results

if __name__ == '__main__':
    file_name = './datasets/security_train_sliced_1000.csv'
    data = pd.read_csv(file_name)
 
    nb_features, nb_data, nb_files = get_data_info(data)

    data_split_per_id = split_per_id(data, nb_files)

    api2idx = creat_api2idx(data)

    files, labels = encode_api_name(data_split_per_id, api2idx)

    feature_mat = create_feature_matrix(files, api2idx)
    edge_idx = create_edge_index(files)

    dataset = create_geometric(feature_mat, edge_idx, labels)
    print(len(dataset))